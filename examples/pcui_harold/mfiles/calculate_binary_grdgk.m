function grdgk = calculate_binary_grdgk(rho,keff,metrics)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Calculates \grad\rho dot \grad(\kappa+\kappa_t) for SGS phi_d. 
% x,y,z are the grid points (cell centers) and rho,kappa are the 
% density and eddy-diffustivity, both including 1 halo cell. 
%
% Bobby Arthur
% July 2014
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Calculate components of strain rate s = du_i/dx_j
r_1 = 1/metrics.J.* ...
     ( metrics.XI_X.*( rho(3:end,2:end-1,2:end-1) - rho(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_X.*( rho(2:end-1,3:end,2:end-1) - rho(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_X.*( rho(2:end-1,2:end-1,3:end) - rho(2:end-1,2:end-1,1:end-2) )/2 );
 
r_2 = 1/metrics.J.* ...
     ( metrics.XI_Y.*( rho(3:end,2:end-1,2:end-1) - rho(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Y.*( rho(2:end-1,3:end,2:end-1) - rho(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Y.*( rho(2:end-1,2:end-1,3:end) - rho(2:end-1,2:end-1,1:end-2) )/2 );
 
r_3 = 1/metrics.J.* ...
     ( metrics.XI_Z.*( rho(3:end,2:end-1,2:end-1) - rho(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Z.*( rho(2:end-1,3:end,2:end-1) - rho(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Z.*( rho(2:end-1,2:end-1,3:end) - rho(2:end-1,2:end-1,1:end-2) )/2 );
 
k_1 = 1/metrics.J.* ...
     ( metrics.XI_X.*( keff(3:end,2:end-1,2:end-1) - keff(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_X.*( keff(2:end-1,3:end,2:end-1) - keff(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_X.*( keff(2:end-1,2:end-1,3:end) - keff(2:end-1,2:end-1,1:end-2) )/2 );
 
k_2 = 1/metrics.J.* ...
     ( metrics.XI_Y.*( keff(3:end,2:end-1,2:end-1) - keff(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Y.*( keff(2:end-1,3:end,2:end-1) - keff(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Y.*( keff(2:end-1,2:end-1,3:end) - keff(2:end-1,2:end-1,1:end-2) )/2 );
 
k_3 = 1/metrics.J.* ...
     ( metrics.XI_Z.*( keff(3:end,2:end-1,2:end-1) - keff(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Z.*( keff(2:end-1,3:end,2:end-1) - keff(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Z.*( keff(2:end-1,2:end-1,3:end) - keff(2:end-1,2:end-1,1:end-2) )/2 );

grdgk = r_1.*k_1 + r_2.*k_2 + r_3.*k_3;
end




