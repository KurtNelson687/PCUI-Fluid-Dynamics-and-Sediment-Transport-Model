function epsilon_total = calculate_binary_dissipation(u,v,w,nu,metrics)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Calculates volume integrated dissipation using binary output from 
% cns-koltakov. x,y,z are the grid points (cell centers) and u,v,w are the 
% cartesian velocities at the cell centers, both including 1 halo cell. The 
% volume integrated dissipation is calculated as
%
% epsilon = nu*sum(sum(sum(s'_ij*s'_ij*V_ij))) where s'_ij is the
% fluctiating strain rate tensor defined as a perturbation from the lateral
% average.
%
% Bobby Arthur
% May 2013
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Nx = size(u,1); Ny = size(u,2); Nz = size(u,3);

%Calculate components of strain rate s = du_i/dx_j
s_11 = 1/metrics.J.* ...
     ( metrics.XI_X.*( u(3:end,2:end-1,2:end-1) - u(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_X.*( u(2:end-1,3:end,2:end-1) - u(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_X.*( u(2:end-1,2:end-1,3:end) - u(2:end-1,2:end-1,1:end-2) )/2 );
 
s_12 = 1/metrics.J.* ...
     ( metrics.XI_Y.*( u(3:end,2:end-1,2:end-1) - u(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Y.*( u(2:end-1,3:end,2:end-1) - u(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Y.*( u(2:end-1,2:end-1,3:end) - u(2:end-1,2:end-1,1:end-2) )/2 );
 
s_13 = 1/metrics.J.* ...
     ( metrics.XI_Z.*( u(3:end,2:end-1,2:end-1) - u(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Z.*( u(2:end-1,3:end,2:end-1) - u(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Z.*( u(2:end-1,2:end-1,3:end) - u(2:end-1,2:end-1,1:end-2) )/2 );
 
s_21 = 1/metrics.J.* ...
     ( metrics.XI_X.*( v(3:end,2:end-1,2:end-1) - v(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_X.*( v(2:end-1,3:end,2:end-1) - v(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_X.*( v(2:end-1,2:end-1,3:end) - v(2:end-1,2:end-1,1:end-2) )/2 );
 
s_22 = 1/metrics.J.* ...
     ( metrics.XI_Y.*( v(3:end,2:end-1,2:end-1) - v(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Y.*( v(2:end-1,3:end,2:end-1) - v(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Y.*( v(2:end-1,2:end-1,3:end) - v(2:end-1,2:end-1,1:end-2) )/2 );
 
s_23 = 1/metrics.J.* ...
     ( metrics.XI_Z.*( v(3:end,2:end-1,2:end-1) - v(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Z.*( v(2:end-1,3:end,2:end-1) - v(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Z.*( v(2:end-1,2:end-1,3:end) - v(2:end-1,2:end-1,1:end-2) )/2 );

s_31 = 1/metrics.J.* ...
     ( metrics.XI_X.*( w(3:end,2:end-1,2:end-1) - w(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_X.*( w(2:end-1,3:end,2:end-1) - w(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_X.*( w(2:end-1,2:end-1,3:end) - w(2:end-1,2:end-1,1:end-2) )/2 );
 
s_32 = 1/metrics.J.* ...
     ( metrics.XI_Y.*( w(3:end,2:end-1,2:end-1) - w(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Y.*( w(2:end-1,3:end,2:end-1) - w(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Y.*( w(2:end-1,2:end-1,3:end) - w(2:end-1,2:end-1,1:end-2) )/2 );
 
s_33 = 1/metrics.J.* ...
     ( metrics.XI_Z.*( w(3:end,2:end-1,2:end-1) - w(1:end-2,2:end-1,2:end-1) )/2 ...
     + metrics.ET_Z.*( w(2:end-1,3:end,2:end-1) - w(2:end-1,1:end-2,2:end-1) )/2 ...
     + metrics.ZT_Z.*( w(2:end-1,2:end-1,3:end) - w(2:end-1,2:end-1,1:end-2) )/2 );

%Calculate dissipation
% epsilon = zeros(Nx-2,Ny-2,Nz-2);
% for i=1:Nx-2
%     for j=1:Ny-2
%         for k=1:Nz-2
%             s = [s_11(i,j,k), s_12(i,j,k), s_13(i,j,k); ...
%                  s_21(i,j,k), s_22(i,j,k), s_23(i,j,k); ...
%                  s_31(i,j,k), s_32(i,j,k), s_33(i,j,k)];
%             epsilon(i,j,k) = nu*sum(sum(s.^2));
%         end
%     end
% end
% epsilon_total = sum(sum(sum(epsilon./J)));

epsilon_total = nu*sum(sum(sum((s_11.^2 + s_12.^2 + s_13.^2 ...
                              + s_21.^2 + s_22.^2 + s_23.^2 ...
                              + s_31.^2 + s_32.^2 + s_33.^2).*metrics.J)));
end




